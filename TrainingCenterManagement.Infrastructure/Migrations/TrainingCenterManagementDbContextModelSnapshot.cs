// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingCenterManagement.Infrastructure;

#nullable disable

namespace TrainingCenterManagement.Infrastructure.Migrations
{
    [DbContext(typeof(TrainingCenterManagementDbContext))]
    partial class TrainingCenterManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseTrainee", b =>
                {
                    b.Property<Guid>("CoursesCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraineesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesCourseId", "TraineesId");

                    b.HasIndex("TraineesId");

                    b.ToTable("CourseTrainee");
                });

            modelBuilder.Entity("CourseTrainer", b =>
                {
                    b.Property<Guid>("CoursesCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesCourseId", "TrainersId");

                    b.HasIndex("TrainersId");

                    b.ToTable("CourseTrainer");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("TraineeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExamId");

                    b.HasIndex("TraineeId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfLectures")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrainingOfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VedioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("TrainingOfficerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Lecture", b =>
                {
                    b.Property<Guid>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LectureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VedioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LectureId");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TraineeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Presence", b =>
                {
                    b.Property<Guid>("PresenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPresence")
                        .HasColumnType("bit");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraineeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PresenceId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Presences");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Receptionist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.TrainingOfficer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("TrainingOfficers");
                });

            modelBuilder.Entity("CourseTrainee", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTrainer", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainer", null)
                        .WithMany()
                        .HasForeignKey("TrainersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Administrator", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Account", "Account")
                        .WithOne("Administrator")
                        .HasForeignKey("TrainingCenterManagement.Domain.Administrator", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Certificate", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Exam", "Exam")
                        .WithMany("Certificates")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainee", "Trainee")
                        .WithMany("Certificates")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainer", "Trainer")
                        .WithMany("Certificates")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Exam");

                    b.Navigation("Trainee");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Course", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.TrainingOfficer", "TrainingOfficer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainingOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingOfficer");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Exam", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", "Course")
                        .WithOne("Exam")
                        .HasForeignKey("TrainingCenterManagement.Domain.Exam", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Lecture", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Payment", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainee", "Trainee")
                        .WithMany("Payments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Presence", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Course", null)
                        .WithMany("Presences")
                        .HasForeignKey("CourseId");

                    b.HasOne("TrainingCenterManagement.Domain.Lecture", "Lecture")
                        .WithMany("Presences")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainingCenterManagement.Domain.Trainee", "Trainee")
                        .WithMany("Presences")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Receptionist", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Account", "Account")
                        .WithOne("Receptionist")
                        .HasForeignKey("TrainingCenterManagement.Domain.Receptionist", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainee", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Account", "Account")
                        .WithOne("Trainee")
                        .HasForeignKey("TrainingCenterManagement.Domain.Trainee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainer", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Account", "Account")
                        .WithOne("Trainer")
                        .HasForeignKey("TrainingCenterManagement.Domain.Trainer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.TrainingOfficer", b =>
                {
                    b.HasOne("TrainingCenterManagement.Domain.Account", "Account")
                        .WithOne("TrainingOfficer")
                        .HasForeignKey("TrainingCenterManagement.Domain.TrainingOfficer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Account", b =>
                {
                    b.Navigation("Administrator")
                        .IsRequired();

                    b.Navigation("Receptionist")
                        .IsRequired();

                    b.Navigation("Trainee")
                        .IsRequired();

                    b.Navigation("Trainer")
                        .IsRequired();

                    b.Navigation("TrainingOfficer")
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Course", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Exam")
                        .IsRequired();

                    b.Navigation("Lectures");

                    b.Navigation("Payments");

                    b.Navigation("Presences");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Exam", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Lecture", b =>
                {
                    b.Navigation("Presences");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainee", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Payments");

                    b.Navigation("Presences");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.Trainer", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("TrainingCenterManagement.Domain.TrainingOfficer", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
